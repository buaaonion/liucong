/* The following code was generated by JFlex 1.6.1 */

/*
 * 11/13/2004
 *
 * CTokenMaker.java - An object that can take a chunk of text and
 * return a linked list of tokens representing it in the C programming
 * language.
 * 
 * This library is distributed under a modified BSD license.  See the included
 * RSyntaxTextArea.License.txt file for details.
 */
package cn.edu.buaa.bstar.win;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * Scanner for the C programming language.
 *
 * This implementation was created using
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1; however, the generated file
 * was modified for performance.  Memory allocation needs to be almost
 * completely removed to be competitive with the handwritten lexers (subclasses
 * of <code>AbstractTokenMaker</code>, so this class has been modified so that
 * Strings are never allocated (via yytext()), and the scanner never has to
 * worry about refilling its buffer (needlessly copying chars around).
 * We can achieve this because RText always scans exactly 1 line of tokens at a
 * time, and hands the scanner this line as an array of characters (a Segment
 * really).  Since tokens contain pointers to char arrays instead of Strings
 * holding their contents, there is no need for allocating new memory for
 * Strings.<p>
 *
 * The actual algorithm generated for scanning has, of course, not been
 * modified.<p>
 *
 * If you wish to regenerate this file yourself, keep in mind the following:
 * <ul>
 *   <li>The generated <code>CTokenMaker.java</code> file will contain two
 *       definitions of both <code>zzRefill</code> and <code>yyreset</code>.
 *       You should hand-delete the second of each definition (the ones
 *       generated by the lexer), as these generated methods modify the input
 *       buffer, which we'll never have to do.</li>
 *   <li>You should also change the declaration/definition of zzBuffer to NOT
 *       be initialized.  This is a needless memory allocation for us since we
 *       will be pointing the array somewhere else anyway.</li>
 *   <li>You should NOT call <code>yylex()</code> on the generated scanner
 *       directly; rather, you should use <code>getTokenList</code> as you would
 *       with any other <code>TokenMaker</code> instance.</li>
 * </ul>
 *
 * @author Robert Futrell
 * @version 0.6
 *
 */

public class BStarTokenMaker extends AbstractJFlexCTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int MLC = 2;
  public static final int EOL_COMMENT = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\53\1\43\1\51\1\52\1\50\22\0\1\53\1\36\1\44"+
    "\1\62\1\63\1\67\1\113\1\33\1\31\1\31\1\54\1\7\1\67"+
    "\1\37\1\57\1\32\1\47\3\41\4\5\2\3\1\72\1\66\1\34"+
    "\1\30\1\35\1\27\1\64\1\76\1\110\1\77\1\4\1\6\1\60"+
    "\1\1\1\100\1\101\2\1\1\56\1\75\1\102\1\103\1\104\1\1"+
    "\1\105\1\107\1\106\1\55\2\1\1\42\2\1\1\65\1\40\1\65"+
    "\1\61\1\2\1\0\1\24\1\46\1\21\1\10\1\11\1\12\1\25"+
    "\1\70\1\13\2\1\1\15\1\26\1\14\1\20\1\23\1\1\1\17"+
    "\1\16\1\71\1\22\1\45\1\73\1\42\1\111\1\74\1\112\1\114"+
    "\1\112\1\67\6\0\1\51\u1fa2\0\1\51\1\51\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\2\1\4\12\2\1\1"+
    "\1\4\1\5\1\4\1\6\3\4\1\2\1\7\1\10"+
    "\1\2\1\3\1\7\1\11\2\4\2\1\7\2\2\4"+
    "\2\12\1\13\5\12\1\14\2\12\2\15\2\3\1\16"+
    "\6\2\1\17\12\2\1\0\1\20\1\0\1\21\2\22"+
    "\1\23\1\6\1\0\2\10\1\24\1\2\1\15\6\1"+
    "\1\0\7\2\2\0\1\25\6\0\1\3\1\0\1\3"+
    "\1\15\1\16\4\2\1\26\10\2\1\6\1\27\1\6"+
    "\3\22\1\6\2\10\1\30\1\2\1\31\4\1\1\32"+
    "\4\1\6\0\6\2\10\0\1\16\1\0\6\2\1\6"+
    "\1\10\2\31\7\1\4\0\1\32\4\0\5\2\2\0"+
    "\1\33\2\0\1\34\4\2\1\31\1\32\3\1\7\0"+
    "\5\2\4\0\1\35\1\2\2\1\1\32\3\0\3\2"+
    "\2\0\5\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[257];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\115\0\232\0\347\0\u0134\0\u0181\0\u01ce\0\u021b"+
    "\0\u0268\0\u02b5\0\u0302\0\u034f\0\u039c\0\u03e9\0\u0436\0\u0483"+
    "\0\u04d0\0\u051d\0\u056a\0\u05b7\0\u0604\0\u0651\0\u069e\0\u06eb"+
    "\0\u0738\0\u0785\0\u07d2\0\u0604\0\u081f\0\u086c\0\u08b9\0\u0906"+
    "\0\u0953\0\u0604\0\u09a0\0\u0604\0\u09ed\0\u0604\0\u0a3a\0\u0a87"+
    "\0\u0ad4\0\u0b21\0\u0b6e\0\u0bbb\0\u0c08\0\u0c55\0\u0ca2\0\u0cef"+
    "\0\u0604\0\u0d3c\0\u0d89\0\u0dd6\0\u0e23\0\u0e70\0\u0604\0\u0ebd"+
    "\0\u0f0a\0\u0f57\0\u0fa4\0\u0ff1\0\u103e\0\u108b\0\u10d8\0\u1125"+
    "\0\u1172\0\u11bf\0\u120c\0\u1259\0\u0134\0\u12a6\0\u12f3\0\u1340"+
    "\0\u138d\0\u13da\0\u1427\0\u1474\0\u14c1\0\u150e\0\u155b\0\u15a8"+
    "\0\u0604\0\u15f5\0\u0604\0\u1642\0\u168f\0\u0604\0\u16dc\0\u1729"+
    "\0\u1776\0\u17c3\0\u0604\0\u1810\0\u185d\0\u18aa\0\u18f7\0\u1944"+
    "\0\u1991\0\u19de\0\u1a2b\0\u1a78\0\u1ac5\0\u1b12\0\u1b5f\0\u1bac"+
    "\0\u1bf9\0\u1c46\0\u1c93\0\u1ce0\0\u1d2d\0\u0604\0\u1d7a\0\u1dc7"+
    "\0\u1e14\0\u1e61\0\u1eae\0\u1efb\0\u1f48\0\u1f95\0\u0f57\0\u1fe2"+
    "\0\u0f57\0\u202f\0\u207c\0\u20c9\0\u2116\0\u0134\0\u2163\0\u21b0"+
    "\0\u21fd\0\u224a\0\u2297\0\u22e4\0\u2331\0\u237e\0\u23cb\0\u0604"+
    "\0\u2418\0\u2465\0\u24b2\0\u24ff\0\u254c\0\u2599\0\u25e6\0\u0604"+
    "\0\u2633\0\u2680\0\u26cd\0\u271a\0\u2767\0\u27b4\0\u2801\0\u284e"+
    "\0\u289b\0\u28e8\0\u2935\0\u2982\0\u29cf\0\u2a1c\0\u2a69\0\u2ab6"+
    "\0\u2b03\0\u2b50\0\u2b9d\0\u2bea\0\u2c37\0\u2c84\0\u2cd1\0\u2d1e"+
    "\0\u2d6b\0\u2db8\0\u2e05\0\u2e52\0\u2e9f\0\u2eec\0\u2f39\0\u2f86"+
    "\0\u2fd3\0\u3020\0\u306d\0\u30ba\0\u3107\0\u3154\0\u31a1\0\u31ee"+
    "\0\u323b\0\u3288\0\u32d5\0\u3322\0\u336f\0\u33bc\0\u3409\0\u3456"+
    "\0\u34a3\0\u34f0\0\u353d\0\u358a\0\u35d7\0\u3624\0\u3671\0\u36be"+
    "\0\u370b\0\u3758\0\u37a5\0\u37f2\0\u383f\0\u388c\0\u38d9\0\u3926"+
    "\0\u3973\0\u39c0\0\u3a0d\0\u3a5a\0\u3aa7\0\u3af4\0\u3b41\0\u3b8e"+
    "\0\u3bdb\0\u3c28\0\u0f57\0\347\0\u3c75\0\u3cc2\0\u3d0f\0\u3d5c"+
    "\0\u3da9\0\u3df6\0\u3e43\0\u3e90\0\u3edd\0\u3f2a\0\u3f77\0\u3fc4"+
    "\0\u4011\0\u405e\0\u40ab\0\u40f8\0\u3a0d\0\u4145\0\u3af4\0\u0134"+
    "\0\u4192\0\u41df\0\u422c\0\u0604\0\u4279\0\u42c6\0\u4313\0\u4360"+
    "\0\u43ad\0\u43fa\0\u4447\0\u4494\0\u44e1\0\u452e\0\u457b\0\u45c8"+
    "\0\u4615";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[257];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\6\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\5"+
    "\1\21\1\22\4\5\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\24\1\32\1\33\1\6\1\5\1\34"+
    "\1\35\1\36\1\5\1\37\1\40\1\4\2\41\1\42"+
    "\2\5\1\43\1\5\1\44\1\45\2\4\1\25\1\46"+
    "\1\42\1\5\1\47\1\42\1\50\1\5\1\51\1\52"+
    "\2\5\1\53\1\5\1\54\6\5\1\25\1\55\1\56"+
    "\12\57\1\60\30\57\1\61\10\57\1\62\13\57\1\63"+
    "\2\57\1\64\21\57\12\65\1\66\30\65\1\67\24\65"+
    "\1\70\2\65\1\71\21\65\7\4\1\0\17\4\11\0"+
    "\3\4\2\0\3\4\1\0\1\4\3\0\2\4\1\0"+
    "\1\4\1\0\3\4\3\0\2\4\1\0\17\4\3\0"+
    "\1\4\6\5\1\0\17\5\11\0\1\4\2\5\2\0"+
    "\3\5\1\0\1\4\3\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\3\0\2\5\1\0\17\5\3\0"+
    "\3\72\1\6\1\72\1\6\1\73\1\0\1\72\1\73"+
    "\3\72\1\74\4\72\1\75\4\72\11\0\1\72\1\6"+
    "\1\72\2\0\2\72\1\6\1\0\1\72\3\0\1\75"+
    "\1\74\1\76\1\72\1\0\3\72\3\0\2\72\1\0"+
    "\17\72\3\0\1\4\6\5\1\0\17\5\11\0\1\4"+
    "\2\5\2\0\3\5\1\0\1\4\3\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\3\0\2\5\1\0"+
    "\7\5\1\77\7\5\12\0\1\42\105\0\1\4\6\5"+
    "\1\0\10\5\1\100\6\5\11\0\1\4\2\5\2\0"+
    "\3\5\1\0\1\4\3\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\3\0\2\5\1\0\17\5\3\0"+
    "\1\4\6\5\1\0\4\5\1\101\1\102\11\5\11\0"+
    "\1\4\2\5\2\0\3\5\1\0\1\4\3\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\3\0\2\5"+
    "\1\0\17\5\3\0\1\4\6\5\1\0\5\5\1\103"+
    "\6\5\1\104\2\5\11\0\1\4\2\5\2\0\3\5"+
    "\1\0\1\4\3\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\3\0\2\5\1\0\17\5\3\0\1\4"+
    "\6\5\1\0\2\5\1\105\1\5\1\106\12\5\11\0"+
    "\1\4\2\5\2\0\3\5\1\0\1\4\3\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\3\0\2\5"+
    "\1\0\17\5\3\0\1\4\6\5\1\0\3\5\1\107"+
    "\13\5\11\0\1\4\2\5\2\0\3\5\1\0\1\4"+
    "\3\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\3\0\2\5\1\0\17\5\3\0\1\4\6\5\1\0"+
    "\10\5\1\110\6\5\11\0\1\4\2\5\2\0\3\5"+
    "\1\0\1\4\3\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\3\0\2\5\1\0\17\5\3\0\1\4"+
    "\6\5\1\0\1\5\1\106\1\5\1\111\13\5\11\0"+
    "\1\4\2\5\2\0\3\5\1\0\1\4\3\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\3\0\1\112"+
    "\1\113\1\0\17\5\3\0\1\4\6\5\1\0\1\5"+
    "\1\114\15\5\11\0\1\4\2\5\2\0\3\5\1\0"+
    "\1\4\3\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\3\0\2\5\1\0\17\5\3\0\1\4\6\5"+
    "\1\0\10\5\1\115\6\5\11\0\1\4\2\5\2\0"+
    "\3\5\1\0\1\4\3\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\3\0\1\116\1\5\1\0\17\5"+
    "\3\0\1\4\6\5\1\0\4\5\1\117\12\5\11\0"+
    "\1\4\2\5\2\0\3\5\1\0\1\4\3\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\3\0\2\5"+
    "\1\0\17\5\32\0\1\120\115\0\1\42\233\0\1\121"+
    "\4\0\1\122\14\0\1\123\40\0\27\124\1\125\3\124"+
    "\1\126\4\124\1\127\2\124\1\0\51\124\30\0\1\42"+
    "\3\0\1\42\110\0\1\42\4\0\1\42\116\0\1\42"+
    "\55\0\7\4\1\0\17\4\10\0\1\130\3\4\2\0"+
    "\3\4\1\0\1\4\3\0\2\4\1\0\1\4\1\0"+
    "\3\4\3\0\2\4\1\0\17\4\3\0\40\35\1\131"+
    "\2\35\1\132\1\133\50\35\1\4\6\5\1\0\10\5"+
    "\1\134\6\5\11\0\1\4\2\5\2\0\3\5\1\0"+
    "\1\4\3\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\3\0\2\5\1\0\17\5\3\0\3\72\1\6"+
    "\1\72\1\6\1\73\1\0\1\72\1\73\3\72\1\74"+
    "\4\72\1\75\4\72\11\0\1\72\1\6\1\135\2\0"+
    "\2\72\1\6\1\0\1\72\3\0\1\75\1\74\1\76"+
    "\1\72\1\0\3\72\3\0\2\72\1\0\17\72\46\0"+
    "\1\34\123\0\2\41\44\0\1\76\1\0\1\76\33\0"+
    "\1\76\5\0\1\76\45\0\7\4\1\0\1\136\1\137"+
    "\1\4\1\140\1\4\1\141\4\4\1\142\1\143\3\4"+
    "\11\0\3\4\2\0\3\4\1\0\1\4\2\144\1\0"+
    "\2\4\1\0\1\4\1\0\3\4\3\0\2\4\1\0"+
    "\17\4\3\0\1\4\6\5\1\0\7\5\1\145\7\5"+
    "\11\0\1\4\2\5\2\0\3\5\1\0\1\4\3\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\3\0"+
    "\2\5\1\0\16\5\1\146\3\0\1\4\6\5\1\0"+
    "\17\5\11\0\1\4\2\5\2\0\3\5\1\0\1\4"+
    "\3\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\3\0\1\147\1\5\1\0\17\5\3\0\1\4\6\5"+
    "\1\0\17\5\11\0\1\4\2\5\2\0\3\5\1\0"+
    "\1\4\3\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\3\0\2\5\1\0\3\5\1\150\13\5\3\0"+
    "\1\4\6\5\1\0\17\5\11\0\1\4\2\5\2\0"+
    "\3\5\1\0\1\4\3\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\3\0\2\5\1\0\13\5\1\151"+
    "\3\5\3\0\1\4\6\5\1\0\17\5\11\0\1\4"+
    "\2\5\2\0\3\5\1\0\1\4\3\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\3\0\2\5\1\0"+
    "\7\5\1\152\7\5\3\0\1\4\6\5\1\0\17\5"+
    "\11\0\1\4\2\5\2\0\3\5\1\0\1\4\3\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\3\0"+
    "\2\5\1\0\11\5\1\153\5\5\116\0\1\42\115\0"+
    "\1\42\12\57\1\0\30\57\1\0\10\57\1\0\13\57"+
    "\1\0\2\57\1\0\21\57\13\0\1\154\55\0\1\155"+
    "\55\0\1\156\153\0\1\157\116\0\1\160\21\0\12\65"+
    "\1\0\30\65\1\0\24\65\1\0\2\65\1\0\21\65"+
    "\13\0\1\161\55\0\1\162\114\0\1\163\116\0\1\164"+
    "\21\0\7\72\1\0\17\72\11\0\3\72\2\0\3\72"+
    "\1\0\1\72\3\0\2\72\1\0\1\72\1\0\3\72"+
    "\3\0\2\72\1\0\17\72\3\0\3\72\1\165\1\72"+
    "\1\165\1\72\1\166\17\72\10\0\1\166\1\72\1\165"+
    "\1\72\2\0\2\72\1\165\1\0\1\72\3\0\2\72"+
    "\1\0\1\72\1\0\3\72\3\0\2\72\1\0\17\72"+
    "\3\0\7\72\1\0\12\72\1\167\4\72\11\0\3\72"+
    "\2\0\3\72\1\0\1\72\3\0\1\167\1\72\1\0"+
    "\1\72\1\0\3\72\3\0\2\72\1\0\17\72\3\0"+
    "\7\72\1\0\5\72\1\167\11\72\11\0\3\72\2\0"+
    "\3\72\1\0\1\72\3\0\1\72\1\167\1\0\1\72"+
    "\1\0\3\72\3\0\2\72\1\0\17\72\3\0\3\72"+
    "\1\76\1\72\1\76\1\170\1\0\1\72\1\170\1\171"+
    "\2\72\1\171\11\72\11\0\1\72\1\76\1\72\2\0"+
    "\2\72\1\76\1\0\1\72\3\0\1\72\1\171\1\0"+
    "\1\171\1\0\3\72\3\0\2\72\1\0\17\72\3\0"+
    "\1\4\3\5\1\105\2\5\1\0\17\5\11\0\1\4"+
    "\2\5\2\0\3\5\1\0\1\4\3\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\3\0\2\5\1\0"+
    "\17\5\3\0\1\4\6\5\1\0\12\5\1\172\4\5"+
    "\11\0\1\4\2\5\2\0\3\5\1\0\1\4\3\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\3\0"+
    "\2\5\1\0\17\5\3\0\1\4\6\5\1\0\12\5"+
    "\1\173\4\5\11\0\1\4\2\5\2\0\3\5\1\0"+
    "\1\4\3\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\3\0\2\5\1\0\17\5\3\0\1\4\6\5"+
    "\1\0\6\5\1\174\10\5\11\0\1\4\2\5\2\0"+
    "\3\5\1\0\1\4\3\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\3\0\2\5\1\0\17\5\3\0"+
    "\1\4\6\5\1\0\10\5\1\175\6\5\11\0\1\4"+
    "\2\5\2\0\3\5\1\0\1\4\3\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\3\0\2\5\1\0"+
    "\17\5\3\0\1\4\6\5\1\0\5\5\1\102\11\5"+
    "\11\0\1\4\2\5\2\0\3\5\1\0\1\4\3\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\3\0"+
    "\2\5\1\0\17\5\3\0\1\4\6\5\1\0\17\5"+
    "\11\0\1\4\2\5\2\0\3\5\1\0\1\4\3\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\3\0"+
    "\1\5\1\176\1\0\17\5\3\0\1\4\6\5\1\0"+
    "\5\5\1\105\11\5\11\0\1\4\2\5\2\0\3\5"+
    "\1\0\1\4\3\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\3\0\2\5\1\0\17\5\3\0\1\4"+
    "\6\5\1\0\4\5\1\177\12\5\11\0\1\4\2\5"+
    "\2\0\3\5\1\0\1\4\3\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\3\0\2\5\1\0\17\5"+
    "\3\0\1\4\6\5\1\0\17\5\11\0\1\4\2\5"+
    "\2\0\3\5\1\0\1\4\3\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\3\0\2\5\1\0\1\5"+
    "\1\200\15\5\3\0\1\4\6\5\1\0\10\5\1\201"+
    "\6\5\11\0\1\4\2\5\2\0\3\5\1\0\1\4"+
    "\3\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\3\0\2\5\1\0\17\5\3\0\1\4\6\5\1\0"+
    "\7\5\1\202\7\5\11\0\1\4\2\5\2\0\3\5"+
    "\1\0\1\4\3\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\3\0\2\5\1\0\17\5\3\0\1\4"+
    "\6\5\1\0\17\5\11\0\1\4\2\5\2\0\3\5"+
    "\1\0\1\4\3\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\3\0\1\5\1\203\1\0\17\5\3\0"+
    "\1\4\6\5\1\0\4\5\1\204\12\5\11\0\1\4"+
    "\2\5\2\0\3\5\1\0\1\4\3\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\3\0\2\5\1\0"+
    "\17\5\3\0\1\4\6\5\1\0\14\5\1\205\2\5"+
    "\11\0\1\4\2\5\2\0\3\5\1\0\1\4\3\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\3\0"+
    "\2\5\1\0\17\5\3\0\1\4\6\5\1\0\6\5"+
    "\1\206\10\5\11\0\1\4\2\5\2\0\3\5\1\0"+
    "\1\4\3\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\3\0\2\5\1\0\17\5\33\0\10\42\115\0"+
    "\1\42\54\0\33\207\1\210\7\207\1\0\100\207\1\211"+
    "\3\207\1\210\7\207\1\0\56\207\1\212\3\207\2\124"+
    "\1\207\1\124\2\207\1\124\4\207\1\124\2\207\1\124"+
    "\3\207\1\213\4\207\1\124\1\214\1\215\1\0\3\124"+
    "\1\214\21\207\1\124\23\207\32\0\1\42\62\0\5\132"+
    "\1\35\3\132\2\35\1\132\1\35\2\132\1\35\4\132"+
    "\1\35\2\132\1\35\3\132\1\35\4\132\2\35\1\216"+
    "\1\0\4\35\3\0\16\132\1\35\63\132\1\217\3\132"+
    "\1\220\50\132\1\4\6\5\1\0\3\5\1\221\13\5"+
    "\11\0\1\4\2\5\2\0\3\5\1\0\1\4\3\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\3\0"+
    "\2\5\1\0\17\5\3\0\3\72\4\222\1\0\3\222"+
    "\6\72\1\222\2\72\1\222\2\72\11\0\1\72\1\222"+
    "\1\72\2\0\1\72\2\222\1\0\1\72\3\0\2\72"+
    "\1\0\1\222\1\0\3\72\3\0\2\72\1\0\3\72"+
    "\2\222\10\72\1\222\1\72\3\0\7\4\1\0\1\4"+
    "\1\223\15\4\11\0\3\4\2\0\3\4\1\0\1\4"+
    "\3\0\2\4\1\0\1\4\1\0\3\4\3\0\2\4"+
    "\1\0\17\4\3\0\7\4\1\0\4\4\1\224\1\225"+
    "\1\4\1\226\7\4\11\0\3\4\2\0\3\4\1\0"+
    "\1\4\3\0\2\4\1\0\1\4\1\0\3\4\3\0"+
    "\2\4\1\0\17\4\3\0\7\4\1\0\2\4\1\227"+
    "\1\4\1\230\12\4\11\0\3\4\2\0\3\4\1\0"+
    "\1\4\3\0\2\4\1\0\1\4\1\0\3\4\3\0"+
    "\2\4\1\0\17\4\3\0\7\4\1\0\3\4\1\231"+
    "\13\4\11\0\3\4\2\0\3\4\1\0\1\4\3\0"+
    "\2\4\1\0\1\4\1\0\3\4\3\0\2\4\1\0"+
    "\17\4\3\0\7\4\1\0\4\4\1\232\12\4\11\0"+
    "\3\4\2\0\3\4\1\0\1\4\3\0\2\4\1\0"+
    "\1\4\1\0\3\4\3\0\2\4\1\0\17\4\3\0"+
    "\7\4\1\0\7\4\1\233\7\4\11\0\3\4\2\0"+
    "\3\4\1\0\1\4\3\0\2\4\1\0\1\4\1\0"+
    "\3\4\3\0\2\4\1\0\17\4\13\0\1\234\1\235"+
    "\1\0\1\236\1\0\1\237\4\0\1\240\1\241\26\0"+
    "\2\144\41\0\1\4\6\5\1\0\12\5\1\174\4\5"+
    "\11\0\1\4\2\5\2\0\3\5\1\0\1\4\3\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\3\0"+
    "\2\5\1\0\17\5\3\0\1\4\6\5\1\0\13\5"+
    "\1\242\3\5\11\0\1\4\2\5\2\0\3\5\1\0"+
    "\1\4\3\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\3\0\2\5\1\0\17\5\3\0\1\4\6\5"+
    "\1\0\3\5\1\243\13\5\11\0\1\4\2\5\2\0"+
    "\3\5\1\0\1\4\3\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\3\0\2\5\1\0\17\5\3\0"+
    "\1\4\6\5\1\0\17\5\11\0\1\4\2\5\2\0"+
    "\3\5\1\0\1\4\3\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\3\0\2\5\1\0\4\5\1\244"+
    "\12\5\3\0\1\4\6\5\1\0\17\5\11\0\1\4"+
    "\2\5\2\0\3\5\1\0\1\4\3\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\3\0\2\5\1\0"+
    "\13\5\1\245\3\5\3\0\1\4\6\5\1\0\17\5"+
    "\11\0\1\4\2\5\2\0\3\5\1\0\1\4\3\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\3\0"+
    "\2\5\1\0\4\5\1\246\12\5\3\0\1\4\5\5"+
    "\1\247\1\0\17\5\11\0\1\4\2\5\2\0\3\5"+
    "\1\0\1\4\3\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\3\0\2\5\1\0\17\5\20\0\1\250"+
    "\122\0\1\251\162\0\1\252\116\0\1\253\36\0\1\254"+
    "\122\0\1\255\162\0\1\256\116\0\1\257\21\0\3\72"+
    "\1\165\1\72\1\165\1\72\1\0\5\72\1\74\4\72"+
    "\1\75\4\72\11\0\1\72\1\165\1\72\2\0\2\72"+
    "\1\165\1\0\1\72\3\0\1\75\1\74\1\0\1\72"+
    "\1\0\3\72\3\0\2\72\1\0\17\72\6\0\1\165"+
    "\1\0\1\165\33\0\1\165\5\0\1\165\45\0\3\72"+
    "\1\260\1\72\1\260\1\72\1\261\17\72\10\0\1\261"+
    "\1\72\1\260\1\72\2\0\2\72\1\260\1\0\1\72"+
    "\3\0\2\72\1\0\1\72\1\0\3\72\3\0\2\72"+
    "\1\0\17\72\3\0\1\4\6\5\1\0\17\5\11\0"+
    "\1\4\2\5\2\0\1\5\1\262\1\5\1\0\1\4"+
    "\3\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\3\0\2\5\1\0\17\5\3\0\1\4\6\5\1\0"+
    "\16\5\1\105\11\0\1\4\2\5\2\0\3\5\1\0"+
    "\1\4\3\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\3\0\2\5\1\0\17\5\3\0\1\4\6\5"+
    "\1\0\1\5\1\105\15\5\11\0\1\4\2\5\2\0"+
    "\3\5\1\0\1\4\3\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\3\0\2\5\1\0\17\5\3\0"+
    "\1\4\6\5\1\0\14\5\1\106\2\5\11\0\1\4"+
    "\2\5\2\0\3\5\1\0\1\4\3\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\3\0\2\5\1\0"+
    "\17\5\3\0\1\4\6\5\1\0\15\5\1\176\1\5"+
    "\11\0\1\4\2\5\2\0\3\5\1\0\1\4\3\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\3\0"+
    "\2\5\1\0\17\5\3\0\1\4\6\5\1\0\1\5"+
    "\1\263\15\5\11\0\1\4\2\5\2\0\3\5\1\0"+
    "\1\4\3\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\3\0\2\5\1\0\17\5\3\0\1\4\6\5"+
    "\1\0\7\5\1\106\7\5\11\0\1\4\2\5\2\0"+
    "\3\5\1\0\1\4\3\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\3\0\2\5\1\0\17\5\3\0"+
    "\1\4\6\5\1\0\12\5\1\264\4\5\11\0\1\4"+
    "\2\5\2\0\3\5\1\0\1\4\3\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\3\0\2\5\1\0"+
    "\17\5\3\0\1\4\6\5\1\0\12\5\1\265\4\5"+
    "\11\0\1\4\2\5\2\0\3\5\1\0\1\4\3\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\3\0"+
    "\2\5\1\0\17\5\3\0\1\4\6\5\1\0\6\5"+
    "\1\266\10\5\11\0\1\4\2\5\2\0\3\5\1\0"+
    "\1\4\3\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\3\0\2\5\1\0\17\5\3\0\1\4\6\5"+
    "\1\0\7\5\1\176\7\5\11\0\1\4\2\5\2\0"+
    "\3\5\1\0\1\4\3\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\3\0\2\5\1\0\17\5\3\0"+
    "\1\4\6\5\1\0\3\5\1\267\13\5\11\0\1\4"+
    "\2\5\2\0\3\5\1\0\1\4\3\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\3\0\2\5\1\0"+
    "\17\5\3\0\33\207\1\126\7\207\1\0\101\207\3\124"+
    "\1\213\4\124\3\207\1\0\56\207\1\124\25\207\1\210"+
    "\5\207\1\124\1\207\1\0\3\207\1\124\45\207\33\0"+
    "\1\210\61\0\5\207\1\212\25\207\1\210\5\207\1\212"+
    "\1\207\1\0\3\207\1\212\50\207\4\270\1\207\3\270"+
    "\6\207\1\270\2\207\1\270\6\207\1\126\5\207\1\270"+
    "\1\207\1\0\2\207\2\270\10\207\1\270\15\207\2\270"+
    "\10\207\1\270\4\207\3\132\4\271\1\132\3\271\6\132"+
    "\1\271\2\132\1\271\13\132\1\217\1\271\2\132\1\220"+
    "\1\132\2\271\10\132\1\271\15\132\2\271\10\132\1\271"+
    "\47\132\1\0\4\132\3\0\42\132\1\4\6\5\1\0"+
    "\1\176\16\5\11\0\1\4\2\5\2\0\3\5\1\0"+
    "\1\4\3\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\3\0\2\5\1\0\17\5\3\0\3\72\4\222"+
    "\1\0\3\222\2\72\1\272\3\72\1\222\1\273\1\72"+
    "\1\222\2\72\11\0\1\72\1\222\1\72\2\0\1\72"+
    "\2\222\1\0\1\72\3\0\1\273\1\272\1\0\1\222"+
    "\1\0\3\72\3\0\2\72\1\0\3\72\2\222\10\72"+
    "\1\222\1\72\3\0\7\4\1\0\2\4\1\141\14\4"+
    "\11\0\3\4\2\0\3\4\1\0\1\4\3\0\2\4"+
    "\1\0\1\4\1\0\3\4\3\0\2\4\1\0\17\4"+
    "\3\0\7\4\1\0\1\274\16\4\11\0\3\4\2\0"+
    "\3\4\1\0\1\4\3\0\2\4\1\0\1\4\1\0"+
    "\3\4\3\0\2\4\1\0\17\4\3\0\7\4\1\0"+
    "\3\4\1\275\2\4\1\276\10\4\11\0\3\4\2\0"+
    "\3\4\1\0\1\4\3\0\2\4\1\0\1\4\1\0"+
    "\3\4\3\0\2\4\1\0\17\4\3\0\7\4\1\0"+
    "\7\4\1\277\7\4\11\0\3\4\2\0\3\4\1\0"+
    "\1\4\3\0\2\4\1\0\1\4\1\0\3\4\3\0"+
    "\2\4\1\0\17\4\3\0\7\4\1\0\1\300\3\4"+
    "\1\232\12\4\11\0\3\4\2\0\3\4\1\0\1\4"+
    "\3\0\2\4\1\0\1\4\1\0\3\4\3\0\2\4"+
    "\1\0\17\4\3\0\7\4\1\0\11\4\1\301\5\4"+
    "\11\0\3\4\2\0\3\4\1\0\1\4\3\0\2\4"+
    "\1\0\1\4\1\0\3\4\3\0\2\4\1\0\17\4"+
    "\3\0\7\4\1\0\4\4\1\276\12\4\11\0\3\4"+
    "\2\0\3\4\1\0\1\4\3\0\2\4\1\0\1\4"+
    "\1\0\3\4\3\0\2\4\1\0\17\4\3\0\7\4"+
    "\1\0\1\300\16\4\11\0\3\4\2\0\3\4\1\0"+
    "\1\4\3\0\2\4\1\0\1\4\1\0\3\4\3\0"+
    "\2\4\1\0\17\4\3\0\7\4\1\0\14\4\1\302"+
    "\2\4\11\0\3\4\2\0\3\4\1\0\1\4\3\0"+
    "\2\4\1\0\1\4\1\0\3\4\3\0\2\4\1\0"+
    "\17\4\14\0\1\303\117\0\1\304\1\305\1\0\1\306"+
    "\107\0\1\307\1\0\1\310\113\0\1\311\115\0\1\312"+
    "\117\0\1\313\75\0\1\4\6\5\1\0\1\5\1\314"+
    "\15\5\11\0\1\4\2\5\2\0\3\5\1\0\1\4"+
    "\3\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\3\0\2\5\1\0\17\5\3\0\1\4\6\5\1\0"+
    "\5\5\1\174\11\5\11\0\1\4\2\5\2\0\3\5"+
    "\1\0\1\4\3\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\3\0\2\5\1\0\17\5\3\0\1\4"+
    "\6\5\1\0\17\5\11\0\1\4\2\5\2\0\3\5"+
    "\1\0\1\4\3\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\3\0\2\5\1\0\5\5\1\315\11\5"+
    "\3\0\1\4\6\5\1\0\17\5\11\0\1\4\2\5"+
    "\2\0\3\5\1\0\1\4\3\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\3\0\2\5\1\0\12\5"+
    "\1\316\4\5\3\0\1\4\6\5\1\0\17\5\11\0"+
    "\1\4\2\5\2\0\3\5\1\0\1\4\3\0\1\5"+
    "\1\317\1\0\1\5\1\0\1\4\1\5\1\4\3\0"+
    "\2\5\1\0\17\5\3\0\1\4\6\5\1\0\17\5"+
    "\11\0\1\4\2\5\2\0\3\5\1\0\1\4\3\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\3\0"+
    "\2\5\1\0\12\5\1\320\4\5\14\0\1\251\175\0"+
    "\1\321\45\0\1\322\150\0\1\323\46\0\1\255\175\0"+
    "\1\324\45\0\1\325\150\0\1\326\35\0\3\72\1\260"+
    "\1\72\1\260\1\72\1\0\2\72\1\171\2\72\1\171"+
    "\11\72\11\0\1\72\1\260\1\72\2\0\2\72\1\260"+
    "\1\0\1\72\3\0\1\72\1\171\1\0\1\171\1\0"+
    "\3\72\3\0\2\72\1\0\17\72\6\0\1\260\1\0"+
    "\1\260\33\0\1\260\5\0\1\260\45\0\1\4\6\5"+
    "\1\0\5\5\1\327\11\5\11\0\1\4\2\5\2\0"+
    "\3\5\1\0\1\4\3\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\3\0\2\5\1\0\17\5\3\0"+
    "\1\4\6\5\1\0\10\5\1\330\6\5\11\0\1\4"+
    "\2\5\2\0\3\5\1\0\1\4\3\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\3\0\2\5\1\0"+
    "\17\5\3\0\1\4\6\5\1\0\11\5\1\266\5\5"+
    "\11\0\1\4\2\5\2\0\3\5\1\0\1\4\3\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\3\0"+
    "\2\5\1\0\17\5\3\0\1\4\6\5\1\0\7\5"+
    "\1\331\7\5\11\0\1\4\2\5\2\0\3\5\1\0"+
    "\1\4\3\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\3\0\2\5\1\0\17\5\3\0\1\4\6\5"+
    "\1\0\17\5\11\0\1\4\2\5\2\0\3\5\1\0"+
    "\1\4\3\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\3\0\1\5\1\105\1\0\17\5\3\0\1\4"+
    "\6\5\1\0\15\5\1\332\1\5\11\0\1\4\2\5"+
    "\2\0\3\5\1\0\1\4\3\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\3\0\2\5\1\0\17\5"+
    "\3\0\3\207\4\124\1\207\3\124\6\207\1\124\2\207"+
    "\1\124\6\207\1\126\5\207\1\124\1\207\1\0\2\207"+
    "\2\124\10\207\1\124\15\207\2\124\10\207\1\124\4\207"+
    "\3\132\4\35\1\132\3\35\6\132\1\35\2\132\1\35"+
    "\13\132\1\217\1\35\2\132\1\220\1\132\2\35\10\132"+
    "\1\35\15\132\2\35\10\132\1\35\4\132\7\72\1\0"+
    "\12\72\1\333\4\72\11\0\3\72\2\0\3\72\1\0"+
    "\1\72\3\0\1\333\1\72\1\0\1\72\1\0\3\72"+
    "\3\0\2\72\1\0\17\72\3\0\7\72\1\0\5\72"+
    "\1\333\11\72\11\0\3\72\2\0\3\72\1\0\1\72"+
    "\3\0\1\72\1\333\1\0\1\72\1\0\3\72\3\0"+
    "\2\72\1\0\17\72\3\0\7\4\1\0\3\4\1\275"+
    "\13\4\11\0\3\4\2\0\3\4\1\0\1\4\3\0"+
    "\2\4\1\0\1\4\1\0\3\4\3\0\2\4\1\0"+
    "\17\4\3\0\7\4\1\0\2\4\1\334\14\4\11\0"+
    "\3\4\2\0\3\4\1\0\1\4\3\0\2\4\1\0"+
    "\1\4\1\0\3\4\3\0\2\4\1\0\17\4\3\0"+
    "\7\4\1\0\1\4\1\334\15\4\11\0\3\4\2\0"+
    "\3\4\1\0\1\4\3\0\2\4\1\0\1\4\1\0"+
    "\3\4\3\0\2\4\1\0\17\4\3\0\7\4\1\0"+
    "\10\4\1\335\6\4\11\0\3\4\2\0\3\4\1\0"+
    "\1\4\3\0\2\4\1\0\1\4\1\0\3\4\3\0"+
    "\2\4\1\0\17\4\3\0\7\4\1\0\1\4\1\275"+
    "\15\4\11\0\3\4\2\0\3\4\1\0\1\4\3\0"+
    "\2\4\1\0\1\4\1\0\3\4\3\0\2\4\1\0"+
    "\17\4\3\0\7\4\1\0\5\4\1\336\11\4\11\0"+
    "\3\4\2\0\3\4\1\0\1\4\3\0\2\4\1\0"+
    "\1\4\1\0\3\4\3\0\2\4\1\0\17\4\3\0"+
    "\7\4\1\0\15\4\1\337\1\4\11\0\3\4\2\0"+
    "\3\4\1\0\1\4\3\0\2\4\1\0\1\4\1\0"+
    "\3\4\3\0\2\4\1\0\17\4\15\0\1\237\112\0"+
    "\1\340\117\0\1\341\2\0\1\342\115\0\1\343\105\0"+
    "\1\344\3\0\1\312\121\0\1\345\107\0\1\342\110\0"+
    "\1\344\130\0\1\346\70\0\1\4\6\5\1\0\1\347"+
    "\16\5\11\0\1\4\2\5\2\0\3\5\1\0\1\4"+
    "\3\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\3\0\2\5\1\0\17\5\3\0\1\4\6\5\1\0"+
    "\17\5\11\0\1\4\2\5\2\0\3\5\1\0\1\4"+
    "\3\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\3\0\2\5\1\0\6\5\1\350\10\5\3\0\1\4"+
    "\6\5\1\0\17\5\11\0\1\4\2\5\2\0\3\5"+
    "\1\0\1\4\3\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\3\0\2\5\1\0\6\5\1\351\10\5"+
    "\3\0\1\4\6\5\1\0\17\5\11\0\1\4\2\5"+
    "\2\0\3\5\1\0\1\4\3\0\1\352\1\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\3\0\2\5\1\0"+
    "\17\5\3\0\1\4\6\5\1\0\17\5\11\0\1\4"+
    "\2\5\2\0\3\5\1\0\1\4\3\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\3\0\2\5\1\0"+
    "\3\5\1\353\13\5\35\0\1\354\100\0\1\251\53\0"+
    "\1\321\23\0\1\323\1\355\4\323\1\355\17\323\3\355"+
    "\1\323\1\355\2\0\2\355\1\0\2\323\2\0\3\323"+
    "\4\0\1\355\2\323\1\355\1\323\1\0\1\355\1\323"+
    "\4\355\2\323\1\355\17\323\1\0\1\355\33\0\1\356"+
    "\100\0\1\255\53\0\1\324\23\0\1\326\1\357\4\326"+
    "\1\357\17\326\3\357\1\326\1\357\2\0\2\357\1\0"+
    "\2\326\2\0\3\326\4\0\1\357\2\326\1\357\1\326"+
    "\1\0\1\357\1\326\4\357\2\326\1\357\17\326\1\0"+
    "\1\357\1\0\1\4\6\5\1\0\1\5\1\176\15\5"+
    "\11\0\1\4\2\5\2\0\3\5\1\0\1\4\3\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\3\0"+
    "\2\5\1\0\17\5\3\0\1\4\6\5\1\0\2\5"+
    "\1\105\14\5\11\0\1\4\2\5\2\0\3\5\1\0"+
    "\1\4\3\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\3\0\2\5\1\0\17\5\3\0\1\4\6\5"+
    "\1\0\4\5\1\360\12\5\11\0\1\4\2\5\2\0"+
    "\3\5\1\0\1\4\3\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\3\0\2\5\1\0\17\5\3\0"+
    "\1\4\6\5\1\0\4\5\1\361\12\5\11\0\1\4"+
    "\2\5\2\0\3\5\1\0\1\4\3\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\3\0\2\5\1\0"+
    "\17\5\3\0\7\4\1\0\7\4\1\334\7\4\11\0"+
    "\3\4\2\0\3\4\1\0\1\4\3\0\2\4\1\0"+
    "\1\4\1\0\3\4\3\0\2\4\1\0\17\4\3\0"+
    "\7\4\1\0\12\4\1\362\4\4\11\0\3\4\2\0"+
    "\3\4\1\0\1\4\3\0\2\4\1\0\1\4\1\0"+
    "\3\4\3\0\2\4\1\0\17\4\3\0\7\4\1\0"+
    "\16\4\1\363\11\0\3\4\2\0\3\4\1\0\1\4"+
    "\3\0\2\4\1\0\1\4\1\0\3\4\3\0\2\4"+
    "\1\0\17\4\16\0\1\341\113\0\1\364\113\0\1\364"+
    "\123\0\1\365\105\0\1\341\120\0\1\366\124\0\1\367"+
    "\67\0\1\4\6\5\1\0\1\5\1\330\15\5\11\0"+
    "\1\4\2\5\2\0\3\5\1\0\1\4\3\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\3\0\2\5"+
    "\1\0\17\5\3\0\1\4\6\5\1\0\17\5\11\0"+
    "\1\4\2\5\2\0\3\5\1\0\1\4\3\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\3\0\2\5"+
    "\1\0\7\5\1\370\7\5\3\0\1\4\6\5\1\0"+
    "\17\5\11\0\1\4\2\5\2\0\3\5\1\0\1\4"+
    "\3\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\3\0\2\5\1\0\15\5\1\371\1\5\3\0\1\4"+
    "\3\5\1\370\2\5\1\0\17\5\11\0\1\4\2\5"+
    "\2\0\3\5\1\0\1\4\3\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\3\0\2\5\1\0\17\5"+
    "\3\0\1\4\6\5\1\0\17\5\11\0\1\4\2\5"+
    "\2\0\3\5\1\0\1\4\3\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\3\0\2\5\1\0\13\5"+
    "\1\372\3\5\35\0\1\323\114\0\1\326\62\0\1\4"+
    "\6\5\1\0\1\5\1\221\15\5\11\0\1\4\2\5"+
    "\2\0\3\5\1\0\1\4\3\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\3\0\2\5\1\0\17\5"+
    "\3\0\7\4\1\0\1\276\16\4\11\0\3\4\2\0"+
    "\3\4\1\0\1\4\3\0\2\4\1\0\1\4\1\0"+
    "\3\4\3\0\2\4\1\0\17\4\3\0\7\4\1\0"+
    "\14\4\1\334\2\4\11\0\3\4\2\0\3\4\1\0"+
    "\1\4\3\0\2\4\1\0\1\4\1\0\3\4\3\0"+
    "\2\4\1\0\17\4\22\0\1\364\117\0\1\373\120\0"+
    "\1\374\66\0\1\4\5\5\1\105\1\0\17\5\11\0"+
    "\1\4\2\5\2\0\3\5\1\0\1\4\3\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\3\0\2\5"+
    "\1\0\17\5\3\0\1\4\6\5\1\0\17\5\11\0"+
    "\1\4\2\5\2\0\3\5\1\0\1\4\3\0\1\375"+
    "\1\5\1\0\1\5\1\0\1\4\1\5\1\4\3\0"+
    "\2\5\1\0\17\5\3\0\1\4\6\5\1\0\17\5"+
    "\11\0\1\4\2\5\2\0\3\5\1\0\1\4\3\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\3\0"+
    "\2\5\1\0\6\5\1\376\10\5\13\0\1\342\130\0"+
    "\1\364\70\0\1\4\6\5\1\0\17\5\11\0\1\4"+
    "\2\5\2\0\3\5\1\0\1\4\3\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\3\0\2\5\1\0"+
    "\13\5\1\377\3\5\3\0\1\4\6\5\1\0\17\5"+
    "\11\0\1\4\2\5\2\0\3\5\1\0\1\4\3\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\3\0"+
    "\2\5\1\0\10\5\1\u0100\6\5\3\0\1\4\5\5"+
    "\1\u0101\1\0\17\5\11\0\1\4\2\5\2\0\3\5"+
    "\1\0\1\4\3\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\3\0\2\5\1\0\17\5\3\0\1\4"+
    "\6\5\1\0\17\5\11\0\1\4\2\5\2\0\3\5"+
    "\1\0\1\4\3\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\3\0\2\5\1\0\7\5\1\u0101\7\5"+
    "\3\0\1\4\6\5\1\0\17\5\11\0\1\4\2\5"+
    "\2\0\3\5\1\0\1\4\3\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\3\0\2\5\1\0\14\5"+
    "\1\105\2\5\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18018];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\21\1\1\11\6\1\1\11\5\1\1\11\1\1"+
    "\1\11\1\1\1\11\12\1\1\11\5\1\1\11\30\1"+
    "\1\0\1\11\1\0\1\11\2\1\1\11\1\1\1\0"+
    "\2\1\1\11\10\1\1\0\7\1\2\0\1\11\6\0"+
    "\1\1\1\0\21\1\1\11\7\1\1\11\13\1\6\0"+
    "\6\1\10\0\1\1\1\0\21\1\4\0\1\1\4\0"+
    "\5\1\2\0\1\1\2\0\12\1\7\0\5\1\4\0"+
    "\4\1\1\11\3\0\3\1\2\0\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[257];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public BStarTokenMaker() {
		super();
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *                    occurs.
	 */
	@Override
	public void addToken(char[] array, int start, int end, int tokenType, int startOffset) {
		super.addToken(array, start,end, tokenType, startOffset);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * {@inheritDoc}
	 */
	@Override
	public String[] getLineCommentStartAndEnd(int languageIndex) {
		return new String[] { "//", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *                    <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
			case Token.COMMENT_MULTILINE:
				state = MLC;
				start = text.offset;
				break;
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new TokenImpl();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public BStarTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 228) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }
  
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }

  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
        	  zzInput = zzBufferL[zzCurrentPosL++];
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
            	zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            switch (zzLexicalState) {
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 258: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 259: break;
            case EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 260: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { addToken(Token.ERROR_IDENTIFIER);
            }
          case 30: break;
          case 2: 
            { addToken(Token.IDENTIFIER);
            }
          case 31: break;
          case 3: 
            { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
            }
          case 32: break;
          case 4: 
            { addToken(Token.OPERATOR);
            }
          case 33: break;
          case 5: 
            { addToken(Token.SEPARATOR);
            }
          case 34: break;
          case 6: 
            { addToken(Token.ERROR_CHAR); addNullToken(); return firstToken;
            }
          case 35: break;
          case 7: 
            { addNullToken(); return firstToken;
            }
          case 36: break;
          case 8: 
            { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
            }
          case 37: break;
          case 9: 
            { addToken(Token.WHITESPACE);
            }
          case 38: break;
          case 10: 
            { 
            }
          case 39: break;
          case 11: 
            { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
          case 40: break;
          case 12: 
            { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
          case 41: break;
          case 13: 
            { addToken(Token.ERROR_NUMBER_FORMAT);
            }
          case 42: break;
          case 14: 
            { addToken(Token.LITERAL_NUMBER_FLOAT);
            }
          case 43: break;
          case 15: 
            { addToken(Token.RESERVED_WORD);
            }
          case 44: break;
          case 16: 
            { start = zzMarkedPos-2; yybegin(EOL_COMMENT);
            }
          case 45: break;
          case 17: 
            { start = zzMarkedPos-2; yybegin(MLC);
            }
          case 46: break;
          case 18: 
            { addToken(Token.ERROR_CHAR); /*addNullToken(); return firstToken;*/
            }
          case 47: break;
          case 19: 
            { addToken(Token.ERROR_CHAR);
            }
          case 48: break;
          case 20: 
            { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
            }
          case 49: break;
          case 21: 
            { yybegin(YYINITIAL); addToken(start,zzStartRead+1, Token.COMMENT_MULTILINE);
            }
          case 50: break;
          case 22: 
            { addToken(Token.DATA_TYPE);
            }
          case 51: break;
          case 23: 
            { addToken(Token.LITERAL_CHAR);
            }
          case 52: break;
          case 24: 
            { addToken(Token.ERROR_STRING_DOUBLE);
            }
          case 53: break;
          case 25: 
            { addToken(Token.LITERAL_NUMBER_HEXADECIMAL);
            }
          case 54: break;
          case 26: 
            { addToken(Token.PREPROCESSOR);
            }
          case 55: break;
          case 27: 
            { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_MULTILINE); start = zzMarkedPos;
            }
          case 56: break;
          case 28: 
            { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
            }
          case 57: break;
          case 29: 
            { addToken(Token.RESERVED_WORD_2);
            }
          case 58: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
